<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://vgihan.github.io/</id><title>vgihan's blog</title><subtitle>vgihan</subtitle> <updated>2022-09-08T15:44:23+09:00</updated> <author> <name>Kim Gihan</name> <uri>https://vgihan.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://vgihan.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://vgihan.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Kim Gihan </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>D3 Icicle Chart Transition</title><link href="https://vgihan.github.io/posts/D3-icicle-chart-transition/" rel="alternate" type="text/html" title="D3 Icicle Chart Transition" /><published>2022-07-28T00:00:00+09:00</published> <updated>2022-09-08T15:39:38+09:00</updated> <id>https://vgihan.github.io/posts/D3-icicle-chart-transition/</id> <content src="https://vgihan.github.io/posts/D3-icicle-chart-transition/" /> <author> <name>vgihan</name> </author> <category term="d3" /> <summary> icicle chart 다음 목표는 transition을 넣는 것이다. 클릭한 블럭만 transition을 넣는 것이 아니라, 다른 블럭도 함께 움직이는 transition이라 생각하기가 쉽지 않다. Node vs Selection transition을 부여하기 위해선, Node와 Selection을 구별할 줄 알아야한다. Node는 hierarchy 함수를 통해 데이터를 갖는 객체이고, Selection은 해당 데이터를 통해 실질적으로 눈에 보여지는 element 들이다. 그렇기 때문에, transition은 Node가 아니라 Selection에 부여할 수 있다. Selection Node Selection의 하위 Selection 참조 Node는 결국 Tree 자료구조이기 때문에 ... </summary> </entry> <entry><title>React Native Splash Screen</title><link href="https://vgihan.github.io/posts/React-Native-SplashScreen/" rel="alternate" type="text/html" title="React Native Splash Screen" /><published>2022-07-25T00:00:00+09:00</published> <updated>2022-07-25T00:00:00+09:00</updated> <id>https://vgihan.github.io/posts/React-Native-SplashScreen/</id> <content src="https://vgihan.github.io/posts/React-Native-SplashScreen/" /> <author> <name>vgihan</name> </author> <category term="React Native" /> <summary> 앱을 시작하기 전에 화면에 등장하는 스플래시 이미지를 React Native 환경에서 적용해보자. react-native-splash-screen 라이브러리를 활용하여 구현할 수 있다. iOS에서 실행을 확인할 수 있는 방법이 없어, 안드로이드 환경에서 구현하는 방법만 살펴본다. Installing react-native-splash-screen을 설치한다. yarn add react-native-splash-screen Android 아래 순서로 프로젝트 내부 빌드 파일들을 수정한다. settings.gradle include ':react-native-splash-screen' project(':react-native-splash-screen').projectDir = new File... </summary> </entry> <entry><title>TCP vs UDP</title><link href="https://vgihan.github.io/posts/TCPvsUDP/" rel="alternate" type="text/html" title="TCP vs UDP" /><published>2022-07-08T00:00:00+09:00</published> <updated>2022-07-08T00:00:00+09:00</updated> <id>https://vgihan.github.io/posts/TCPvsUDP/</id> <content src="https://vgihan.github.io/posts/TCPvsUDP/" /> <author> <name>vgihan</name> </author> <category term="network" /> <summary> TCP란 4계층 transport layer에서 작동하는 통신 프로토콜로써, 연결 지향적 프로토콜이다. 연결 지향적 프로토콜이라는 말은 미리 연결을 맺어 두고 해당 연결을 통해 신뢰성 있는 통신을 하는 것이다. 특징 신뢰성 : 손상되거나 유실 혹은 중복된 패킷에 대한 처리가 이루어져 수신자로 하여금 송신자가 보낸 패킷을 제대로 받을 수 있도록 보장함. 흐름 제어 : TCP Segment를 수신 혹은 송신하는 컴퓨터는 CPU와 네트워크 간 대역폭 차이 때문에 서로 다른 속도로 작동할 수 있다. 이는 송신자와 수신자 간 속도가 맞지 않게 될 수 있다는 것인데, TCP는 이러한 흐름 제어 또한 처리할 수 있다. 다중화 : 여러 프로세스가 TCP 통신을 동시에 사용할 수 있다. 각 프로세스는 4계층에... </summary> </entry> <entry><title>Promise.all</title><link href="https://vgihan.github.io/posts/Promise-all/" rel="alternate" type="text/html" title="Promise.all" /><published>2022-07-06T00:00:00+09:00</published> <updated>2022-07-06T00:00:00+09:00</updated> <id>https://vgihan.github.io/posts/Promise-all/</id> <content src="https://vgihan.github.io/posts/Promise-all/" /> <author> <name>vgihan</name> </author> <category term="JavaScript" /> <summary> 자바스크립트에서 비동기 작업을 처리하는 방법으로는 분류하자면 세 가지가 존재한다. 첫 번째는 콜백함수를 호출하는 것이고, 두 번째는 Promise.then, 마지막은 문법적으로 처리할 수 있는 async await 키워드를 이용한 방법이다. 사실, async await 키워드를 가지고 비동기 작업을 처리하면 매우 간단하다. Promise를 반환하는 작업 앞에 await를 붙이고 해당 함수를 async function으로 만들어주면 되기 때문이다. 하지만, 아래와 같은 코드에서처럼 async await를 사용하게 되면 비효율적인 문제가 발생한다. Problem a는 1초 후 1을 반환하는 비동기 함수이고, b는 2초 후 2를, c는 3초 후 3을 반환하는 비동기 함수이다. 비동기 처리를 위해 ma... </summary> </entry> <entry><title>ESLint</title><link href="https://vgihan.github.io/posts/ESLint/" rel="alternate" type="text/html" title="ESLint" /><published>2022-07-04T00:00:00+09:00</published> <updated>2022-07-04T00:00:00+09:00</updated> <id>https://vgihan.github.io/posts/ESLint/</id> <content src="https://vgihan.github.io/posts/ESLint/" /> <author> <name>vgihan</name> </author> <category term="JavaScript" /> <summary> ESLint 란? ES + Lint 로써 ES는 Ecma Script 즉, 표준 JavaScript를 의미하고 Lint는 직역하면 보푸라기라는 뜻인데, 코드에서 보푸라기란 오류, 버그, 스타일 오류, 의심스러운 구조체 등이라고 한다. 따라서 ESLint는 JavaScript를 개발하는데 있어서 Type error나 import error 등을 잡아줄 수 있고, 더 나아가 협업하는데 있어서 미리 코드 스타일을 지정해두고 해당 스타일에 맞게 사용하지 않으면 오류를 띄워 맞춰주는 역할을 수행한다. 예를 들어, 아래와 같은 상황을 보자. John이 짠 코드 import React from "react"; import MainPage from "./page/main"; Tom이 짠 ... </summary> </entry> </feed>
